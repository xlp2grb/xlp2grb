#!/bin/bash
#Author: xlp at 20130101
#Version: V1.0
#function: to match the newimage to the refcom.fit with xyxymatch
#input newimage 
#output *tempxyOT *skyOT
#This codes includes the catalog match and image subtraction
#image match is only done with 1 times.
# modified by xlp at 20130110
#update the codes about the flux match for subimage
#update the codes about the FWHM calculation for xFhmwCal.sh
# modifed by xlp at 20130113
#rm -rf listsky*
DIR_data=`pwd`
sub_dir=$HOME/workspace/redufile/subfile/
lc_dir=$HOME/workspace/redufile/getlc
Alltemplatetable=refcom3d.cat
tempfile=refcom.fit
tempsubbgfile=refcom_subbg.fit
Accfile=refcom.acc
CCDsize=3056
ejmin=10
ejmax=`echo $CCDsize | awk '{print($1-ejmin)}' ejmin=$ejmin` 
crossRedius=1
darkname=Dark.fit
flatname=Flat_bg.fit
dir_basicimage=$HOME/workspace/basicfile

#Nf=0
#rm -rf matchchb.log matchchb_all.log
rm -rf list2frame.list list_fin listnewskyot.list listOT listsky listsky1 listskyotfile listskyotfileHis listskyot.list listtemp listtime 

./xmknewfile.sh  # build a new directory for results
#========================================================================
for FILE in `cat listmatch`
do
	date >time_redu_f

	FITFILE=$FILE
	ls $FITFILE >>listmatch.old
	echo `date +%s` >>listmatch.old
	OUTPUT=`echo $FITFILE | sed 's/\.fit/.fit.sex/'`	# output of SourceExtractor
	OUTPUT_new=`echo $FITFILE | sed 's/\.fit/.fit.sexnew/'`	# Catalog for the bright source. Output from $OUTPUT. Input for the xyxymatch
	OUTPUT_newfirst=`echo $FITFILE | sed 's/\.fit/.fit.sexnewfirst/'`
	imagetmp1sd=`echo $FITFILE | sed 's/\.fit/.fit.mattmp1sd/'`
	imagetmp2sd=`echo $FITFILE | sed 's/\.fit/.fit.mattmp2sd/'`	# output of the xyxymatch, input for geomap	
	imagetmp3sd=`echo $FITFILE | sed 's/\.fit/.fit.mattmp3sd/'`
	imagetrans1sd=`echo $FITFILE | sed 's/\.fit/.fit.trans1sd/'`
	imagetrans2sd=`echo $FITFILE | sed 's/\.fit/.fit.trans2sd/'`	# output of the geomap,
	 imagetrans3sd=`echo $FITFILE | sed 's/\.fit/.fit.trans3sd/'`
	inprefix=`echo $FITFILE | sed 's/\.fit//'`			# inprefix of the fit. it was used in the iraf.geomap and iraf.geoxytran
	crossoutput_xy=`echo $FITFILE | sed 's/\.fit/.fit.tempxyOT/'`	# Output of the Crossmatch in the temp frame. This code is writed by CHB. It is also the input for cctran.
	crossoutput_sky=`echo $FITFILE | sed 's/\.fit/.fit.skyOT/'`	# Output of the iraf.cctran. The input for this process is $crossoutput_xy. Catalog in which RA DEC are included, 
	newimageOTxyFis=`echo $FITFILE | sed 's/\.fit/.fit.newxyOT1/'`  # Output of the iraf.geoxytran. The input for this process is $crossoutput_xy. Catalog in which xc,yc are includec in the new image frame.
	OUTPUT_fwhm=`echo $FITFILE | sed 's/\.fit/.fit.fwhm/'`			# Output of the FWHM caculation code xFwhmCal_single.sh. 
	bg=`echo $FITFILE | sed 's/\.fit/.bg.fit/'`				# Output of the SourceExtractor. Background image for the new image. 
	sample_firstTriangle=`echo $FITFILE | sed 's/\.fit/.fit.TriSam1sd.cat/'`
        sample_secTriangle=`echo $FITFILE | sed 's/\.fit/.fit.TriSam2sd.cat/'`
        sample_firstTolere=`echo $FITFILE | sed 's/\.fit/.fit.TolSam1sd.cat/'`
        refnew_xyflux=`echo $FITFILE | sed 's/\.fit/.fit.refnew_xyflux.cat/'`
        CoordDiff_table=`echo $FITFILE | sed 's/\.fit/.fit.coordiff.cat/'`
        OUTPUT_geoxytran1=`echo $FITFILE | sed 's/\.fit/.fit.tran1/'`
	OUTPUT_geoxytran2=`echo $FITFILE | sed 's/\.fit/.fit.tran2/'`	# Catalog in the temp frame relatively to the $OUTPUT. Output for the geoxytran 
        OUTPUT_geoxytran3=`echo $FITFILE | sed 's/\.fit/.fit.tran3/'`
        newimageStandxyFis=`echo $FITFILE | sed 's/\.fit/.fit.newStandxy1/'`
        newimageStandxySecond=`echo $FITFILE | sed 's/\.fit/.fit.newStandxy2/'`
        newimageOTxySecond=`echo $FITFILE | sed 's/\.fit/.fit.newxyOT2/'`
	newimageOTxyThird=`echo $FITFILE | sed 's/\.fit/.fit.newxyOT3/'`

	echo $FITFILE 
#add the keywords jd in the fit header
	dateobs=`gethead $FITFILE "DATE-OBS" | sed 's/T/ /' | awk '{print($1)}'`
        timeobs=`gethead $FITFILE "DATE-OBS" | sed 's/T/ /' | awk '{print($2)}'`
#        sethead -nkr X DATE-OBS=$dateobs ut=$timeobs ra="00"  dec="00" epoch="2000" $FITFILE
	sethead -kr X DATE-OBS=$dateobs ut=$timeobs $FITFILE
        cd $HOME/iraf
        cp -f login.cl.old login.cl
        echo noao >> login.cl
        echo astutil >> login.cl
        echo "cd $DIR_data" >> login.cl
        echo "setjd(\"$FITFILE\", date=\"DATE-OBS\",time=\"ut\")" >>login.cl
        echo logout >> login.cl
        cl < login.cl >xlogfile
        cd $HOME/iraf
        cp -f login.cl.old login.cl
        cd $DIR_data
#======================================================
	if [ ! -r $darkname ] 
	then
		if [  -r $dir_basicimage/$darkname ]	
		then
			cp $dir_basicimage/$darkname $DIR_data
			xdarkcorr.sh $FITFILE $darkname
		fi
	else
		xdarkcorr.sh $FITFILE $darkname
	fi
	if [ ! -r $flatname ]
	then
		if [  -r $dir_basicimage/$flatname ]
		then
			cp $dir_basicimage/$flatname $DIR_data
			xflatcorr.sh $FITFILE $flatname
		fi
	else
		xflatcorr.sh $FITFILE $flatname
	fi

#	./xdarkcorr.sh $FITFILE $darkname                     #only doing the dark correction
#	./xdarkflatcoor.sh $FITFILE $darkname $flatname       #do the dark and flat correction simultaneously.
#======================================================
#	To get the source from the image by Source Extractor "sex"
	sex $FITFILE  -c  xmatchdaofind.sex -DETECT_THRESH 1.5 -ANALYSIS_THRESH 1.5 -CATALOG_NAME $OUTPUT -CHECKIMAGE_TYPE BACKGROUND -CHECKIMAGE_NAME $bg 
#=========================================================================
#	echo `date` "1sh match obj extracted"
        xNpixel=`gethead $FITFILE "NAXIS1"`
        yNpixel=`gethead $FITFILE "NAXIS2"`		
	cat $OUTPUT | awk '{if(($3-$5)/$6>30 && $4==0) print($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)}' | column -t >allres1
	cat allres1 | sort -n -k 7 | head -2000 | awk '{print($1,$2,$3)}' > $OUTPUT_newfirst
#========================================================
	echo `date` "The first tolerance match will be going on"
        matchflag=tolerance
        #Nbstar=30 #set several regions to extract the bright stars to match each other
        fitorder=6
	tempmatchstars=GwacStandall.cat

#=======================================================
	echo `date` "First tolerance match"
        cd $HOME/iraf
        cp -f login.cl.old login.cl
        echo noao >> login.cl
        echo image >> login.cl
        echo "cd $DIR_data" >> login.cl
        echo "xyxymatch(\"$OUTPUT_newfirst\",\"$tempmatchstars\", \"$imagetmp3sd\",toleranc=20, xcolumn=1,ycolumn=2,xrcolum=1,yrcolum=2,separation=7, matchin=\"$matchflag\", inter-,verbo-) " >>login.cl
        echo "geomap(\"$imagetmp3sd\", \"$imagetrans3sd\", transfo=\"$inprefix\", verbos-, xmin=1, xmax=$xNpixel, ymin=1, ymax=$yNpixel,fitgeom=\"general\", functio=\"polynomial\",xxorder=$fitorder,xyorder=$fitorder,xxterms=\"half\",yxorder=$fitorder,yyorder=$fitorder,yxterms=\"half\", maxiter=5,reject=2.5,inter-)" >>login.cl
        echo logout >> login.cl
        cl < login.cl >xlogfile

        cd $HOME/iraf
        cp -f login.cl.old login.cl
        cd $DIR_data
#        mv mattmp1 $imagetmp2sd
#        mv transform1.db $imagetrans2sd
#	cp $imagetrans2sd trans2sd.bak1
        if test -r $imagetrans3sd
        then
		xrms=`cat $imagetrans3sd | grep "rms" | tr '\n' ' ' | awk '{print($2)}'`
		yrms=`cat $imagetrans3sd | grep "rms" | tr '\n' ' ' | awk '{print($4)}'`
		echo "%%%%%%%%%%%%%%%%"
		echo `cat $imagetrans3sd | grep "shift"`
		echo $xrms $yrms
		rm -rf $imagetrans3sd
	#	to check wether the match is good enough or not by rms at X-axis and Y-axis.
	##	if [ ` echo " $xrms < 0.2 " | bc ` -eq 1   -o  $yrms -lt 0.2  ]
		if [ ` echo " $xrms > 0.2 " | bc ` -eq 1 ] # if good enough
		then
#============================
#			./xmatch11.cat.tr.sh
#			xNpixel=`gethead $FITFILE "NAXIS1"`
#        		yNpixel=`gethead $FITFILE "NAXIS2"`
			cat $OUTPUT | awk '{if(($3-$5)/$6>20) print($1,$2,$3,$4,$5,$6,$7)}' | column -t >allres0
		        matchflag=triangles
		        Nbstar=10 #set 10*10 regions to extract the bright stars to match each other
		        Ng=2
		        fitorder=2
		        tempmatchstars=refcom1d.cat
		        xNb=`echo $xNpixel $Nbstar | awk '{print(int($1/$2))}'`
		        yNb=`echo $yNpixel $Nbstar | awk '{print(int($1/$2))}'`
		        for((i=$Ng;i<($Nbstar-$Ng);i++))
		        do
		                for((j=$Ng;j<($Nbstar-$Ng);j++))
		                do
		                        cat allres0 | awk '{if( (xnb*i)<$1 && $1<=(xnb*(i+1))  &&    (ynb*j)<$2 && $2<=(ynb*(j+1))) print($1,$2,$3)}' i=$i j=$j xnb=$xNb ynb=$yNb | sort -n -r -k 3 | head -5 | column -t >Res$i$j
		                done
		        done
		
		        cat Res* >$OUTPUT_new
		        cp  $OUTPUT_new $sample_firstTriangle
			rm -rf Res* mattmp
		        cd $HOME/iraf
		        cp -f login.cl.old login.cl
		        echo noao >> login.cl
		        echo image >>login.cl
		        echo "cd $DIR_data" >> login.cl
		        echo $OUTPUT_new $tempmatchstars
		        echo "xyxymatch(\"$OUTPUT_new\",\"$tempmatchstars\", \"$imagetmp1sd\",toleranc=70, xcolumn=1,ycolumn=2,xrcolum=1,yrcolum=2,separation=5, matchin=\"$matchflag\", inter-,verbo-) " >>login.cl
		        echo "geomap(\"$imagetmp1sd\", \"$imagetrans1sd\", transfo=\"$inprefix\", verbos-, xmin=1, xmax=$xNpixel, ymin=1, ymax=$xNpixel,fitgeom=\"general\", functio=\"polynomial\",xxorder=$fitorder,xyorder=$fitorder,xxterms=\"half\",yxorder=$fitorder,yyorder=$fitorder,yxterms=\"half\", inter-)" >>login.cl
		        echo "geoxytran(\"$OUTPUT\", \"$OUTPUT_geoxytran1\",\"$imagetrans1sd\", transfo=\"$inprefix\",geometr=\"geometric\",directi=\"backward\",xcolumn=1,ycolumn=2,calctyp=\"double\",min_sig=7)" >>login.cl
		        echo logout >> login.cl
		        cl < login.cl >xlogfile
		        cd $HOME/iraf
		        cp -f login.cl.old login.cl
		        cd $DIR_data
#		        mv mattmp $imagetmp1sd
#		        mv transform.db $imagetrans1sd
			echo "for imagetrans1sd,rms:"
			cat $imagetrans1sd | grep "rms" | awk '{print($2)}' 

		        cat $OUTPUT_geoxytran1 | awk '{if(($3-$5)/$6>20) print($1,$2,$3,$4,$5,$6,$7)}' | column -t >allres0
		        xNb=`echo $xNpixel $Nbstar | awk '{print(int($1/$2))}'`
		        yNb=`echo $yNpixel $Nbstar | awk '{print(int($1/$2))}'`
		        for((i=$Ng;i<($Nbstar-$Ng);i++))
		        do
		                for((j=$Ng;j<($Nbstar-$Ng);j++))
		                do
		                        cat allres0 | awk '{if( (xnb*i)<$1 && $1<=(xnb*(i+1))  &&    (ynb*j)<$2 && $2<=(ynb*(j+1))) print($1,$2,$3)}' i=$i j=$j xnb=$xNb ynb=$yNb | sort -n -r -k 3 | head -5 | column -t >Res$i$j
		                done
		        done
		
		        cat Res* >$OUTPUT_new
		        cp $OUTPUT_new $sample_secTriangle
		        rm -rf Res* mattmp
		
		        cd $HOME/iraf
		        cp -f login.cl.old login.cl
		        echo noao >> login.cl
		        echo image >>login.cl
		        echo "cd $DIR_data" >> login.cl
		        echo $OUTPUT_new $tempmatchstars
		        echo "xyxymatch(\"$OUTPUT_new\",\"$tempmatchstars\", \"$imagetmp2sd\",toleranc=30, xcolumn=1,ycolumn=2,xrcolum=1,yrcolum=2,separation=5, matchin=\"$matchflag\", inter-,verbo-) " >>login.cl
		        echo "geomap(\"$imagetmp2sd\", \"$imagetrans2sd\", transfo=\"$inprefix\", verbos-, xmin=1, xmax=$xNpixel, ymin=1, ymax=$xNpixel,fitgeom=\"general\", functio=\"polynomial\",xxorder=$fitorder,xyorder=$fitorder,xxterms=\"half\",yxorder=$fitorder,yyorder=$fitorder,yxterms=\"half\", inter-)" >>login.cl
		        echo "geoxytran(\"$OUTPUT_geoxytran1\", \"$OUTPUT_geoxytran2\",\"$imagetrans2sd\", transfo=\"$inprefix\",geometr=\"geometric\",directi=\"backward\",xcolumn=1,ycolumn=2,calctyp=\"double\",min_sig=7)" >>login.cl
		        echo logout >> login.cl
		        cl < login.cl >xlogfile
		
		        cd $HOME/iraf
		        cp -f login.cl.old login.cl
		        cd $DIR_data
		        #mv mattmp $imagetmp2sd
		        #mv transform.db $imagetrans2sd

#====================================================
			cat $imagetrans1sd | grep "shift" | awk '{print($2)}' |  tr '\n' '  ' > newxyshift.cat
			cat $imagetrans2sd | grep "shift" | awk '{print($2)}' |  tr '\n' '  ' >> newxyshift.cat
		        echo >> newxyshift.cat
		        echo "The shift in xy is"
		        cat newxyshift.cat
			echo "for imagetrans2sd"
			cat $imagetrans2sd | grep "rms" | awk '{print($2)}'  | tr '\n' ' '
#==========================================================				
#with in the information about the newxyshift from the last image to do the xyxymatch
			if test -r newxyshift.cat # shift information from the last image for which the match is successful. 
			then
			xshift=`cat newxyshift.cat | awk '{print($1+$3)}'`
			yshift=`cat newxyshift.cat | awk '{print($2+$4)}'`	
			echo $xshift $yshift
			#cp $OUTPUT_new1 OUTPUT_newfirst
			#cat $OUTPUT_newfirst | awk '{print($1-xshift,$2-yshift,$3)}' xshift=$xshift yshift=$yshift >output_new_temp     # adding  shifts before match.
			#cp output_new_temp $OUTPUT_new
			cat $OUTPUT_geoxytran2 | awk '{print($1,$2,$3)}' | sort -n -k 7 | head -2000  > $OUTPUT_new	
			echo `date` " Tolerance match again"
#			mv $imagetrans2sd trans2sd.bak
#			mv $imagetmp2sd temp2sd.bak
			rm -rf mattmp1 transform1.db
			matchflag=tolerance
		        fitorder=6
		        tempmatchstars=GwacStandall.cat
		
		        cd $HOME/iraf
	        	cp -f login.cl.old login.cl
		        echo noao >> login.cl
		        echo image >> login.cl
		        echo "cd $DIR_data" >> login.cl
		        echo "xyxymatch(\"$OUTPUT_new\",\"$tempmatchstars\", \"mattmp1\",toleranc=10, xcolumn=1,ycolumn=2,xrcolum=1,yrcolum=2,separation=7, matchin=\"$matchflag\", inter-,verbo-) " >>login.cl
		        echo "geomap(\"mattmp1\", \"$imagetrans3sd\", transfo=\"$inprefix\", verbos-, xmin=1, xmax=$xNpixel, ymin=1, ymax=$yNpixel,fitgeom=\"general\", functio=\"polynomial\",xxorder=$fitorder,xyorder=$fitorder,xxterms=\"half\",yxorder=$fitorder,yyorder=$fitorder,yxterms=\"half\", maxiter=5,reject=3,inter-)" >>login.cl
			echo "geoxytran(\"$OUTPUT_geoxytran2\", \"$OUTPUT_geoxytran3\",\"$imagetrans3sd\", transfo=\"$inprefix\",geometr=\"geometric\",directi=\"backward\",xcolumn=1,ycolumn=2,calctyp=\"double\",min_sig=7)" >>login.cl	
		        echo logout >> login.cl
		        cl < login.cl >xlogfile 
			cd $HOME/iraf
		        cp -f login.cl.old login.cl
		        cd $DIR_data
		        echo " Tolerance match again finished"
			echo "for tolerance imagetrans3sd,rms:"
		   	cat $imagetrans3sd | grep "rms" | awk '{print($2)}' 
#			mv mattmp1 $imagetmp2sd
# to rebuild a file for $imagetrans2sd, the information in which incouds rms and shift for this image relative to the temp file.
			sed -n '1,15p' mattmp1 >$imagetmp2sd
			sed -n '16,1000p' mattmp1 | awk '{print($1,$2,$3+xshift,$4+yshift,$5,$6)}' xshift=$xshift yshift=$yshift >>$imagetmp2sd
		##	rm -rf mattmp1
			if test -r $imagetrans3sd
			then
				xrms=`cat $imagetrans3sd | grep "rms" | tr '\n' ' ' | awk '{print($2)}'`
                		yrms=`cat $imagetrans3sd | grep "rms" | tr '\n' ' ' | awk '{print($4)}'`
				echo `cat $imagetrans3sd | grep "shift"`
                        	echo `cat $imagetrans3sd | grep "rms"`
				if [ ` echo " $xrms < 0.2 " | bc ` -eq 1 ]
				then	
				#	echo "reconstruct the file of trans3sd"
				#	xshift1=`cat $imagetrans1sd | grep "xshift" | awk '{print($2)}'`
				#	yshift1=`cat $imagetrans1sd | grep "yshift" | awk '{print($2)}'`
				#	xshift2=`cat $imagetrans2sd | grep "xshift" | awk '{print($2)}'`
                                #        yshift2=`cat $imagetrans2sd | grep "yshift" | awk '{print($2)}'`
				#	xshift3=`cat $imagetrans3sd | grep "xshift" | awk '{print($2)}'`
                                #        yshift3=`cat $imagetrans3sd | grep "yshift" | awk '{print($2)}'`	
				#	xxshift=`echo $xshift1 $xshift2 $xshift3 | awk '{print($1+$2+$3)}'`
				#	yyshift=`echo $yshift1 $yshift2 $yshift3 | awk '{print($1+$2+$3)}'`
				#	
				#	xmag1=`cat $imagetrans1sd | grep "xmag" | awk '{print($2)}'`
                                #        ymag1=`cat $imagetrans1sd | grep "ymag" | awk '{print($2)}'`
                                #        xmag2=`cat $imagetrans2sd | grep "xmag" | awk '{print($2)}'`
                                #        ymag2=`cat $imagetrans2sd | grep "ymag" | awk '{print($2)}'`
                                #        xmag3=`cat $imagetrans3sd | grep "xmag" | awk '{print($2)}'`
                                #        ymag3=`cat $imagetrans3sd | grep "ymag" | awk '{print($2)}'`
                                #        xxmag=`echo $xmag1 $xmag2 $xmag3 | awk '{print(($1+$2+$3)/3)}'`
                                #        yymag=`echo $ymag1 $ymag2 $ymag3 | awk '{print(($1+$2+$3)/3)}'`


				#	xrotation1=`cat $imagetrans1sd | grep "xrotation" | awk '{print($2)}'`
				#	yrotation1=`cat $imagetrans1sd | grep "yrotation" | awk '{print($2)}'`
				#	xrotation2=`cat $imagetrans2sd | grep "xrotation" | awk '{print($2)}'`
                                #        yrotation2=`cat $imagetrans2sd | grep "yrotation" | awk '{print($2)}'`
				#	xrotation3=`cat $imagetrans3sd | grep "xrotation" | awk '{print($2)}'`
                                #        yrotation3=`cat $imagetrans3sd | grep "yrotation" | awk '{print($2)}'`
				#	xxrotation=`echo $xrotation1 $xrotation2 $xrotation3 | awk '{print(($1+$2+$3)-360)}'`
                                #        yyrotation=`echo $yrotation1 $yrotation2 $yrotation3 | awk '{print(($1+$2+$3)-360)}'`
				#	sed -n '1,8p' $imagetrans1sd >newfile1
				#	echo "	xshift		"$xxshift >>newfile1
				#	echo "	yshift		"$yyshift >>newfile1
				#	echo "	xmag		"$xxmag	  >>newfile1
				#	echo "  	ymag            "$yymag   >>newfile1
				#	echo "  	xxrotation      "$xxrotation   >>newfile1
				#	echo "  	yyrotation      "$yyrotation   >>newfile1
				#	sed -n '15,25p' $imagetrans3sd >>newfile1
				#	echo "			"$xxshift $yyshift >>newfile1
				#	sed -n '27,100p' $imagetrans3sd >>newfile1
				#	mv newfile1 $imagetrans3sd
					echo "&&&&&&&&&&&&&&&&&&"
					echo `cat $imagetrans3sd | grep "shift"`
					echo `cat $imagetrans3sd | grep "rms"`
				else
					echo "image match faild"
					break
#					ls $FITFILE >listmatch.temp
#					./xmatch11.cat.tr.sh
			#		mv mattmp1 $imagetmp2sd
			#	        mv transform1.db $imagetrans2sd
	
				fi
			fi
			fi
		   else
                        echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"  
                        echo `cat $imagetrans3sd | grep "shift"`
                        echo `cat $imagetrans3sd | grep "rms"`

#			echo "------------NO newxyshift.cat-----------"
#			ls $FITFILE >listmatch.temp
#			./xmatch11.cat.tr.sh
#			 mv mattmp1 $imagetmp2sd
#                         mv transform1.db $imagetrans2sd
	 	   fi
        else

		echo " There must be some wrong for the match"
	        break

        fi
	
#======================================================
# transform the xy of new image to temp.
	if test -r $OUTPUT_geoxytran3
	then 
		echo "All xytran from image to temp finished"
	else
		echo `date` "All xytran from image to temp"
        	cd $HOME/iraf
        	cp -f login.cl.old login.cl
        	echo noao >> login.cl
        	echo image >> login.cl
        	echo "cd $DIR_data" >> login.cl
		echo "geoxytran(\"$OUTPUT\", \"$OUTPUT_geoxytran3\",\"$imagetrans3sd\", transfo=\"$inprefix\",geometr=\"geometric\",directi=\"backward\",xcolumn=1,ycolumn=2,calctyp=\"double\",min_sig=7)" >>login.cl
		echo logout >> login.cl
        	cl < login.cl >xlogfile
        	cd $HOME/iraf
        	cp -f login.cl.old login.cl
        	cd $DIR_data
	fi
#======================================================
#	echo "+/-2 pixel" $OUTPUT_geoxytran $Alltemplatetable $crossoutput
	echo `date` "crossmatch"  # cross match between new image and temp in XY spece.
	./CrossMatch $crossRedius $OUTPUT_geoxytran3 $Alltemplatetable $crossoutput_xy
#select out those at the edge of the image.
	cat $crossoutput_xy | awk '{if($1>ejmin && $1<ejmax && $2>ejmin && $2<ejmax) print($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)}' ejmin=$ejmin ejmax=$ejmax | grep -v "99.000" >temp 
	mv temp $crossoutput_xy 
	NumOT=`wc $crossoutput_xy | awk '{print($1)}'`
	wc $crossoutput_xy
#======================================================
	if [ $NumOT -gt 1000 ]  # this might be coused by the missed crossmatch. if the case, this image would be deleted.
	then 
		echo "The Num. of possile OT is too many, might be caused by the wrough xyxymatch "
		ls $FITFILE >>xMissmatch.list
	   rm -rf $OUTPUT_geoxytran3
		
	else # cross match might be successful.
	{
	#==========================================================
	#This part is to transform the xy of OT candidates into the Ra and Dec.
	echo `date` "cctran of OT to image and display"
	if test -r $imagetrans1sd
	echo "imagetrans1sd exist"
	then
		cd $HOME/iraf
                cp -f login.cl.old login.cl
                echo noao >> login.cl
                echo digiphot >> login.cl
                echo image >> login.cl
                echo imcoords >>login.cl
                echo "cd $DIR_data" >> login.cl
                echo "cctran(input=\"$crossoutput_xy\",output=\"$crossoutput_sky\", database=\"$Accfile\",solutions=\"first\", geometry=\"geometric\",lngunits=\"degrees\",latunits=\"degrees\",projection=\"tan\",xcolumn=1,ycolumn=2,min_sigdigits=7,forward+,lngform=\"%12.7f\",latform=\"%12.7f\" ) " >>login.cl
               echo "geoxytran(\"$crossoutput_xy\", \"$newimageOTxyThird\",\"$imagetrans3sd\", transfo=\"$inprefix\",geometr=\"geometric\",directi=\"forward\",xcolumn=1,ycolumn=2,calctyp=\"double\",min_sig=7)" >>login.cl
		 echo "geoxytran(\"$newimageOTxyThird\", \"$newimageOTxySecond\",\"$imagetrans2sd\", transfo=\"$inprefix\",geometr=\"geometric\",directi=\"forward\",xcolumn=1,ycolumn=2,calctyp=\"double\",min_sig=7)" >>login.cl
		 echo "geoxytran(\"$newimageOTxySecond\", \"$newimageOTxyFis\",\"$imagetrans1sd\", transfo=\"$inprefix\",geometr=\"geometric\",directi=\"forward\",xcolumn=1,ycolumn=2,calctyp=\"double\",min_sig=7)" >>login.cl	
                echo logout >> login.cl
                cl < login.cl >xlogfile
                cd $HOME/iraf
                cp -f login.cl.old login.cl
                cd $DIR_data	
	else
		cd $HOME/iraf
		cp -f login.cl.old login.cl
		echo noao >> login.cl
		echo digiphot >> login.cl
		echo image >> login.cl
		echo imcoords >>login.cl
		echo "cd $DIR_data" >> login.cl
        	echo "cctran(input=\"$crossoutput_xy\",output=\"$crossoutput_sky\", database=\"$Accfile\",solutions=\"first\", geometry=\"geometric\",lngunits=\"degrees\",latunits=\"degrees\",projection=\"tan\",xcolumn=1,ycolumn=2,min_sigdigits=7,forward+,lngform=\"%12.7f\",latform=\"%12.7f\" ) " >>login.cl
       		echo "geoxytran(\"$crossoutput_xy\", \"$newimageOTxyFis\",\"$imagetrans3sd\", transfo=\"$inprefix\",geometr=\"geometric\",directi=\"forward\",xcolumn=1,ycolumn=2,calctyp=\"double\",min_sig=7)" >>login.cl
		echo logout >> login.cl
        	cl < login.cl >xlogfile
		cd $HOME/iraf
        	cp -f login.cl.old login.cl
        	cd $DIR_data
	fi
#===========================================================
#In final $crossoutput_sky, the parameters are
#ra dec ox(newIm) oy(newIm) rx(refIm) ry(refIm) flux  ***
	echo `date` "making the skyOT list"
	rm -rf listtime
	timeobs=`gethead $FITFILE "date-obs"`
	
	for ((i=0;i<$NumOT;i++))
	do
		echo $timeobs $FITFILE >>listtime
	done

	paste $crossoutput_sky $newimageOTxyFis $crossoutput_xy listtime | awk '{print($1,$2,$11,$12,$21,$22,$31,$32,$3,$4,$5,$6,$7,$8,$9,$10)}' | column -t >crossoutput_skytemp
	mv crossoutput_skytemp $crossoutput_sky

#=================================
#To eject the bad pixel by the crossmatch from $crossoutput_sky and badpixelFile.db
#badpixel file is named as badpixelFile.db
	wc $crossoutput_sky
	echo "To eject the bad pixel"
	cp $crossoutput_sky newoutput
	./xAutoEjectBadpixel
	mv newoutputEjected $crossoutput_sky
	rm -rf newoutput
	wc $crossoutput_sky

##This part is also able to eject the effect by bright stars, the table is named as brightstarsFile.db
#	echo "To eject the effect from bright star"
#	cp $crossoutput_sky newoutput
#	./xAutoEjectBrightstar
#	mv newoutputEjected $crossoutput_sky
#        rm -rf newoutput
#	wc $crossoutput_sky

#===============================================
	ls $crossoutput_sky >>listsky

#	The output name is matchchb.log in which an object who appear for at least twice in 5 images.
	echo '================= Templatemark by CHB ================'	
	cat listsky | tail -5 >listsky1
	RN=`wc listsky1 | awk '{print($1)}'`
	if [ $RN -eq 5 ]
	then
		paste xChbTempBefore.cat listsky1 xChbTempAfter.cat >xChbTempBatch.sh
		sh xChbTempBatch.sh
		wait
		#RN1=`wc matchchb.log | awk '{print($1)}'`
		#if [ $RN1 -gt 0 ]
		if test -s matchchb.log
		then
			echo "@@@@@@@@@@@@@@@@"
			echo "The possible optical transients from matchchb.log are :"
			echo "Time, image, RA, DEC,xi,yi, mag, merr"
#			cat matchchb.log | awk '{print($7,$8,$1,$2,$3,$4,$14,$15)}'
			cat matchchb.log |  awk '{print($5,$6)}' >temp2framecoord_ref
			cat matchchb.log | awk '{print($3,$4)}' >temp2framecoord_new
			echo "@@@@@@@@@@@@@@@@"
			if test -r matchchb_all.log
			then
				cat matchchb_all.log matchchb.log >matchchb_all.log1
				mv matchchb_all.log1 matchchb_all.log
			else
				cp matchchb.log matchchb_all.log
			fi
			
			cp matchchb_all.log list2frame.list
			#cp matchchb.log newframeOT.obj
			wc matchchb.log
			cat matchchb.log | awk '{print($1,$2,$3,$4,$5,$6,$7,$8,$14,$15,$16)}' | sed 's/T/ /' | sed 's/:/ /g' >temp1
			cat temp1 | awk '{if($13<3)print($1,$2,$3,$4,$5,$6,$7"T"$8":"$9":"$9,$8+$9/60+$10/3600,$11,$12,$13,$14)}' |tr -s '\n' | sort -n -k 5 | sort -n -k 6 | uniq | column -t >newframeOT.obj
			./xlc_new1 #output is newStableStar.cat and newVarableStar.cat
			sort -n -r -k 17 newVarableStar.cat >temp1 #sort them with variation among these images.
			mv temp1 newVarableStar.cat
			cat newVarableStar.cat | awk '{print($5,$6)}' >newVarableStar.cat_xytemp
			cat newVarableStar.cat | awk '{print($3,$4)}' >newVarableStar.cat_xynewimg
			wc newVarableStar.cat
			cat newVarableStar.cat >>newVarableStarAll.cat
			
		else
			echo "@@@@@@@@@@@@ No transient candidates in the last 5 images @@@@@@@@@@@@@@@@@@"
		fi
	else
		echo '***************The files in listsky1 are less than 5 ****************'
	fi

#===============================================

	echo "=============="
#	cat list2frame.list | awk '{printf("%f %f %s %s %f %f \n ",$5,$6,$7,$8,$14,$15)}' |tr -s '\n' | sort -n -k 1 | sort -n -k 2 | uniq | column -t>updaterefcom3d.cat

#	cat newframeOT.obj | awk '{print($7,$8,$1,$2,$3,$4)}' 
	echo "=============="
	if test -r listskyot.list
	then
		echo "===="		
	else
		cp $crossoutput_sky listskyot.list
	fi
	cp $crossoutput_sky listnewskyot.list
#	displayPadNum=`ps -all | awk '{if($14=="display") print($4)}'`
	
	gnuplot plot2frame.gn  # it includs listnewskyot.list listskyot.list list2frame.list newframeOT.obj
 #	 kill -9 $displayPadNum
	#display plot3frame.png &
#        display -resize 1012x1012+0+0  plot3frame.png &
#	display -resize 1012x1012+0+0  plot2frame.png &
#	display plot2frame.png &
	ls $crossoutput_sky >>listskyotfile
	cat listskyotfile | tail -40 >listskyotfileHis
	cp listskyotfileHis listskyotfile

	rm -rf listskyot.list	
	for file in `cat listskyotfileHis`
	do
		cat $file >>listskyot.list
	done
#	cat listskyot.list.all $crossoutput_sky | uniq >listskyot.list 
#	cp listskyot.list listskyot.list.all

#=================================================
#        echo `date` "display temp and new image and tvmark these OT"
#        cd $HOME/iraf
#        cp -f login.cl.old login.cl
#        echo noao >> login.cl
#        echo digiphot >> login.cl
#        echo image >> login.cl
#        echo imcoords >>login.cl
#        echo "cd $DIR_data" >> login.cl
#        echo "display(image=\"$FITFILE\",frame=1)" >>login.cl #display newimage in frame 1
#        echo "display(image=\"$tempfile\",frame=2)" >>login.cl #display temp file in frame 2
#       echo "tvmark(frame=1,coords=\"newVarableStar.cat_xynewimg\",mark=\"circle\",radii=10,color=205,label-)" >>login.cl # tvmark new OT in frame 1
##        echo "tvmark(frame=1,coords=\"temp2framecoord_new\",mark=\"circle\",radii=100,color=204,label-)" >>login.cl # tvmark new OT in frame 1
##	echo "tvmark(frame=1,coords=\"temp2framecoord_new\",mark=\"circle\",radii=20,color=204,label-)" >>login.cl # tvmark new OT in frame 1
##        echo "tvmark(frame=2,coords=\"temp2framecoord_ref\",mark=\"circle\",radii=100,color=205,label-)" >>login.cl # tvmark new OT in frame 2
#	echo "tvmark(frame=2,coords=\"newVarableStar.cat_xytemp\",mark=\"circle\",radii=50,color=205,label-)" >>login.cl # tvmark new OT in frame 2
#        echo "tvmark(frame=2,coords=\"$crossoutput_xy\",mark=\"circle\",radii=10,color=204,label-)" >>login.cl #tvmark new OT in frame 2
##        echo "tvmark(frame=1,coords=\"$crossoutput_xy\",mark=\"circle\",radii=100,color=204,label-)" >>login.cl #tvmark new OT in frame 2
##        echo "tvmark(frame=3,coords=\"temp3framecoord_ref\",mark=\"circle\",radii=100,color=204,label+)" >>login.cl #tvmark new OT in frame 3
##      # echo "tvmark(frame=2,coords=\"$newimageOTxyFis\",mark=\"circle\",radii=10,color=204,label+)" >>login.cl # tvmark new OT in frame 2
#        echo logout >> login.cl
#        cl < login.cl >xlogfile
#        cd $HOME/iraf
#        cp -f login.cl.old login.cl
#        cd $DIR_data


	
#=======================================================
#produce the xyshift.cat in which xshift and yshift are shown.
#which is used to distinguish which match method will be adapted, triangles or tolerance.
	echo `date` "Producing the xyshift for the guider "
	cat  $imagetrans2sd | grep "shift" | awk '{print($2)}' | tr '\n' '  ' > newxyshift.cat
	echo >> newxyshift.cat
	cat newxyshift.cat  >>xyshiftall.cat
# =======================================================
#For this part, it has not finished because it depends on the huanglei's code.
#	cat $imagetrans1sd $imagetrans2sd | grep "rms" | awk '{print($2)}' | tr '\n' '  ' 
#	./xsentshift #sent the shift values to telescope controlers.  
#======================================================
#This part is to calculate the FWHM for those standard stars in the new image
#	echo `date` "Calculating the mean FWHM for this image"
	#./xFwhmCal_single.sh $DIR_data $FITFILE $imagetmp1sd $OUTPUT_fwhm 
	ls $crossoutput_sky >listOT

#======================================================
# This part might not be correct, so it is not used right now. It should be checked later.
#	echo `date` "Trim the subimage around the OT from reference and new images"
#	./xTrimIm.sh & 
#=====================================================
	date >time_redu1
	cat time_redu_f time_redu1 >time_redu2
#	cat time_redu2 | awk '{print($5)}' | sed 's/:/ /g' | tr '\n' ' ' | awk '{print(($4-$1)*3600+($5-$2)*60+($6-$3))}' >time_cal
	cat time_redu2 | awk '{print($4)}' | sed 's/:/ /g' | tr '\n' ' ' | awk '{print(($4-$1)*3600+($5-$2)*60+($6-$3))}' >time_cal
	time_need=`cat time_cal`
	echo `date`', All were done in ' $time_need 'sec'
#======================================================
	rm -rf  bak.fit  Res* 
#	rm -rf *2sd.fit $FITFILE 

#	cp $Alltemplatetable $tempfile $tempsubbgfile $Accfile $tempmatchstars $sub_dir
#	mv  $imagetmp2sd $OUTPUT_new $bg $imagetrans2sd $FITFILE $sub_dir
	mv $FITFILE $OUTPUT_geoxytran3  $lc_dir
	rm -rf $bg
#=======================================================
	date -u >time_dir
	year=`cat time_dir | awk '{print($6)}'`
	month=`cat time_dir | awk '{print($2)}'`
	day=`cat time_dir | awk '{print($3)}'`
	wholeotdirectory=`echo "$HOME/workspace/resultfile/"$year$month$day"/wholeimfile"`
	resultfiles=`echo $inprefix"*"`
	skyOTfile=`echo $inprefix".fit.skyOT"`
#	cp $resultfiles $wholeotdirectory 
#	gzip $FITFILE
#       cp $wholeotdirectory/$skyOTfile ./
#=================================================
	}
	fi
	echo "***************Cataloge reduction finished**********************"
done
